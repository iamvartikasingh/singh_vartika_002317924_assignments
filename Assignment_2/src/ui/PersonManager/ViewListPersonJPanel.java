/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.PersonManager;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Person;
import model.PersonDirectory;


/**
 *
 * @author vartika
 */
public class ViewListPersonJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ListPersonJPanel
     * 
     * 
     */
    private JPanel userProcessContainer;
    private PersonDirectory personDirectory;

    
    public ViewListPersonJPanel(JPanel userProcessContainer, PersonDirectory personDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.personDirectory = personDirectory;
        
        
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersons = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnDeleteRow = new javax.swing.JButton();

        setBackground(new java.awt.Color(222, 247, 255));

        tblPersons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Gender", "Email", "SSN", "Height", "Home Street ", "Home City", "Home State", "Home Zip", "Home PhoneNumber", "Work Street", "Work City", "Work State", "Work Zip", "Work Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPersons.setDragEnabled(true);
        tblPersons.setGridColor(new java.awt.Color(0, 153, 153));
        tblPersons.setRowHeight(60);
        tblPersons.setSelectionBackground(new java.awt.Color(0, 153, 153));
        jScrollPane1.setViewportView(tblPersons);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("List of Employees");

        btnBack.setText("<<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDeleteRow.setText("Delete Row");
        btnDeleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(btnBack)
                        .addGap(519, 519, 519)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnDeleteRow)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addGap(34, 34, 34)
                .addComponent(btnDeleteRow, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRowActionPerformed
        // TODO add your handling code here:

       int selectedRow = tblPersons.getSelectedRow();  // Get the selected row index
System.out.println("Selected row: " + selectedRow);

if (selectedRow >= 0) {
    int dialogButton = JOptionPane.YES_NO_OPTION;
    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected person?", "Warning", dialogButton);

    if (dialogResult == JOptionPane.YES_OPTION) {
        // Assuming the email is in column 3 (adjust the column index as necessary)
        Object emailObj = tblPersons.getValueAt(selectedRow, 3);  // Adjust column index based on where the email is stored

        // Check if the retrieved value is a String (since email is usually a String)
        if (emailObj instanceof String) {
            String email = (String) emailObj;
            System.out.println("Person Email: " + email);

            // Now, find the person using the email from the personDirectory
            Person selectedPerson = personDirectory.findPersonByEmail(email);

            if (selectedPerson != null) {
                System.out.println("Selected Person: " + selectedPerson);

                // Delete the person from the directory
                personDirectory.deletePerson(selectedPerson);

                // Refresh the table after deletion
                populateTable();
            } else {
                JOptionPane.showMessageDialog(null, "Person not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            System.out.println("Error: The value in the email column is not a String.");
        }
    }
} else {
    JOptionPane.showMessageDialog(null, "Please select a person from the list.", "Warning", JOptionPane.WARNING_MESSAGE);
}
    }//GEN-LAST:event_btnDeleteRowActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteRow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPersons;
    // End of variables declaration//GEN-END:variables

void populateTable() {

    DefaultTableModel model = (DefaultTableModel) tblPersons.getModel(); // Assuming tblPersons is the table for Person objects
    model.setRowCount(0);

    for (Person p : personDirectory.getPersons()) { // Assuming personDirectory contains the list of persons
        Object[] row = new Object[20]; // Adjust array size based on the fields you want to display

        // Combine first name and last name
        row[0] = p.getFirstName() + " " + p.getLastName();

        // Add age, gender, email, SSN, and height
        row[1] = p.getAge();
        row[2] = p.getGender();
        row[3] = p.getEmail();
        row[4] = p.getSocialSecurityNumber();
        row[5] = p.getHeight();

        // Home address details (check if home address exists)
        if (p.getHomeAddress() != null) {
            row[6] = p.getHomeAddress().getStreet() + " " + p.getHomeAddress().getUnitNumber();
            row[7] = p.getHomeAddress().getCity();
            row[8] = p.getHomeAddress().getState();
            row[9] = p.getHomeAddress().getZipCode();
            row[10] = p.getHomeAddress().getPhoneNumber();
        } else {
            // If no home address, set empty or default values
            row[6] = "";
            row[7] = "";
            row[8] = "";
            row[9] = "";
            row[10] = "";
        }

        // Work address details (check if work address exists)
        if (p.getWorkAddress() != null) {
            row[11] = p.getWorkAddress().getStreet() + " " + p.getWorkAddress().getUnitNumber();
            row[12] = p.getWorkAddress().getCity();
            row[13] = p.getWorkAddress().getState();
            row[14] = p.getWorkAddress().getZipCode();
            row[15] = p.getWorkAddress().getPhoneNumber();
        } else {
            // If no work address, set empty or default values
            row[11] = "";
            row[12] = "";
            row[13] = "";
            row[14] = "";
            row[15] = "";
        }

        model.addRow(row);
    }
}


}
